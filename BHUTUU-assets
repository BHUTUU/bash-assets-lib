#!/usr/bin/env bash
#<<<=======colors========>>>#
#norm
colorCodeNormal() {
  N0="\033[30m"
  N1="\033[31m"
  N2="\033[32m"
  N3="\033[33m"
  N4="\033[34m"
  N5="\033[35m"
  N6="\033[36m"
  N7="\033[37m"
  R0="\033[0;00m"
}
#bold
colorCodeBold() {
  S0="\033[1;30m"
  S1="\033[1;31m"
  S2="\033[1;32m"
  S3="\033[1;33m"
  S4="\033[1;34m"
  S5="\033[1;35m"
  S6="\033[1;36m"
  S7="\033[1;37m"
  R0="\033[0;00m"
}
#<---x--->#
#italic
colorCodeItalic() {
  I0="\033[2;30m"
  I1="\033[2;31m"
  I2="\033[2;32m"
  I3="\033[2;33m"
  I4="\033[2;34m"
  I5="\033[2;35m"
  I6="\033[2;36m"
  I7="\033[2;37m"
  R0="\033[0;00m"
}
#italic
colorCodeSlant() {
  T0="\033[3;30m"
  T1="\033[3;31m"
  T2="\033[3;32m"
  T3="\033[3;33m"
  T4="\033[3;34m"
  T5="\033[3;35m"
  T6="\033[3;36m"
  T7="\033[3;37m"
  R0="\033[0;00m"
}
#underline
colorCodeUnderline() {
  U0="\033[4;30m"
  U1="\033[4;31m"
  U2="\033[4;32m"
  U3="\033[4;33m"
  U4="\033[4;34m"
  U5="\033[4;35m"
  U6="\033[4;36m"
  U7="\033[4;37m"
  R0="\033[0;00m"
}
colorCodeBlink() {
  F0="\033[5;30m"
  F1="\033[5;31m"
  F2="\033[5;32m"
  F3="\033[5;33m"
  F4="\033[5;34m"
  F5="\033[5;35m"
  F6="\033[5;36m"
  F7="\033[5;37m"
  R0="\033[5;00m"
}
colorCodeBackground() {
  B0="\033[40m"
  B1="\033[41m"
  B2="\033[42m"
  B3="\033[43m"
  B4="\033[44m"
  B5="\033[45m"
  B6="\033[46m"
  B7="\033[47m"
  R1="\033[1;00m"
}
#<<<=======Progresssbars=======>>>#
###<---prog1--->###
PROG-BAR1() {
  args="$1"
  if [[ $3 == "3" ]]; then
    printf "\033[?25l"
    for X in "\033[32m${args}\033[31m•\033[34m.....\033[00m" "\033[33m${args}.\033[31m•\033[34m....\033[00m" "\033[36m${args}..\033[31m•\033[34m...\033[00m" "\033[35m${args}...\033[31m•\033[34m..\033[00m" "\033[34m${args}....\033[31m•\033[34m.\033[00m" "\033[37m${args}.....\033[31m•\033[00m" "\033[32m${args}\033[31m•\033[34m.....\033[00m" "\033[33m${args}.\033[31m•\033[34m....\033[00m" "\033[36m${args}..\033[31m•\033[34m...\033[00m" "\033[35m${args}...\033[31m•\033[34m..\033[00m" "\033[34m${args}....\033[31m•\033[34m.\033[00m" "\033[37m${args}.....\033[31m•\033[00m" "\033[32m${args}\033[31m•\033[34m.....\033[00m" "\033[33m${args}.\033[31m•\033[34m....\033[00m" "\033[36m${args}..\033[31m•\033[34m...\033[00m" "\033[35m${args}...\033[31m•\033[34m..\033[00m" "\033[34m${args}....\033[31m•\033[34m.\033[00m" "\033[37m${args}.....\033[31m•\033[00m" "\033[37m$2" 
    do
      echo -en "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b$X"
      sleep 0.1
    done
    echo -e "\033[?12l\033[?25h"
  elif [[ $3 == "2" ]]; then
    printf "\033[?25l"
    for X in "\033[32m${args}\033[31m•\033[34m.....\033[00m" "\033[33m${args}.\033[31m•\033[34m....\033[00m" "\033[36m${args}..\033[31m•\033[34m...\033[00m" "\033[35m${args}...\033[31m•\033[34m..\033[00m" "\033[34m${args}....\033[31m•\033[34m.\033[00m" "\033[37m${args}.....\033[31m•\033[00m" "\033[32m${args}\033[31m•\033[34m.....\033[00m" "\033[33m${args}.\033[31m•\033[34m....\033[00m" "\033[36m${args}..\033[31m•\033[34m...\033[00m" "\033[35m${args}...\033[31m•\033[34m..\033[00m" "\033[34m${args}....\033[31m•\033[34m.\033[00m" "\033[37m${args}.....\033[31m•\033[00m" "\033[37m$2"
    do
    echo -en "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b$X"
    sleep 0.1
    done
    echo -e "\033[?12l\033[?25h"
  elif [[ $3 == "1" ]]; then
    printf "\033[?25l"
    for X in "\033[32m${args}\033[31m•\033[34m.....\033[00m" "\033[33m${args}.\033[31m•\033[34m....\033[00m" "\033[36m${args}..\033[31m•\033[34m...\033[00m" "\033[35m${args}...\033[31m•\033[34m..\033[00m" "\033[34m${args}....\033[31m•\033[34m.\033[00m" "\033[37m${args}.....\033[31m•\033[00m" "\033[37m$2"
    do
    echo -en "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b$X"
    sleep 0.1
    done
    echo -e "\033[?12l\033[?25h"
  else
  printf "\033[32m[\033[31m!\033[32m]\033[31minvalid usage!!\033[00m\n"
echo -e "

  usage help:-

          PROG-BAR1 [process word] [final word] [nuber of times (1/2/3) any one]

"
  fi
}
###<------prog2----->###
PROG-BAR2() {
  function ProgressBar() {
      let _progress=(${1}*100/${2}*100)/100
      let _done=(${_progress}*4)/10
      let _left=40-$_done
      _fill=$(printf "%${_done}s")
      _empty=$(printf "%${_left}s")
  printf "\rProgress : \e[1;33m[${_fill// /\■}\e[1;31m${_empty// /•}\e[1;33m] \e[1;34m${_progress}%%\e[0m"

  }
  _start=1
  _end=100
  for number in $(seq ${_start} ${_end})
  do
      sleep 0.1
      ProgressBar ${number} ${_end}
  done
}
#<-----x----->#
